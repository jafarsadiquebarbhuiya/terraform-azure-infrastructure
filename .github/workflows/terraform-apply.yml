name: 'Terraform Apply'

on:
  workflow_dispatch:
    inputs:
      confirm_apply:
        description: 'Type "APPLY-DEV" to confirm deployment to DEV environment'
        required: true
        type: string

permissions:
  contents: read

jobs:
  deploy-dev:
    name: 'Deploy to DEV Environment'
    runs-on: ubuntu-latest
    environment: DEV
    
    if: github.event.inputs.confirm_apply == 'APPLY-DEV'
    
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_CLI: false
    
    defaults:
      run:
        shell: bash
        working-directory: environments/dev  # Your working directory

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -var-file="devterraform.tfvars" -out=tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    - name: Terraform Output
      id: output
      run: terraform output -json
      continue-on-error: true

    - name: Comment Deployment Result
      uses: actions/github-script@v7
      if: success()
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Create issue comment instead of commit comment for manual workflows
          const issueComment = `### âœ… DEV Environment Deployment Successful
          
          **Environment:** DEV
          **Working Directory:** \`environments/dev\`
          **Variables File:** \`devterraform.tfvars\`
          **Triggered by:** Manual workflow dispatch
          **Confirmation:** \`${{ github.event.inputs.confirm_apply }}\`
          **Actor:** @${{ github.actor }}
          **Timestamp:** ${new Date().toISOString()}
          **Run ID:** ${{ github.run_id }}
          
          <details>
          <summary>Terraform Outputs</summary>
          
          \`\`\`json
          ${{ steps.output.outputs.stdout || '{}' }}
          \`\`\`
          </details>
          
          ðŸš€ **Infrastructure deployment completed successfully!**
          
          [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          // Try to find an existing issue for deployment notifications
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'deployment-notifications'
          });
          
          if (issues.length > 0) {
            // Comment on existing deployment issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues[0].number,
              body: issueComment
            });
          } else {
            // Create new deployment notifications issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸ“‹ Deployment Notifications',
              body: `This issue tracks deployment notifications for the terraform-azure-infrastructure repository.
              
              ${issueComment}`,
              labels: ['deployment-notifications']
            });
          }
      continue-on-error: true