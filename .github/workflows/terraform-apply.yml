name: 'Terraform Apply'

on:
  push:
    branches:
      - master  # Your main branch
    paths:
      - 'environments/**'
      - 'modules/**'

permissions:
  contents: read

jobs:
  deploy-dev:
    name: 'Deploy to DEV Environment'
    runs-on: ubuntu-latest
    environment: DEV
    
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_CLI: false
    
    defaults:
      run:
        shell: bash
        working-directory: environments/dev  # Your working directory

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -var-file="devterraform.tfvars" -out=tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    - name: Terraform Output
      id: output
      run: terraform output -json
      continue-on-error: true

    - name: Comment Deployment Result
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `### âœ… DEV Environment Deployment Successful
          
          **Environment:** DEV
          **Working Directory:** \`environments/dev\`
          **Variables File:** \`devterraform.tfvars\`
          **Commit:** \`${{ github.sha }}\`
          **Actor:** @${{ github.actor }}
          **Timestamp:** ${new Date().toISOString()}
          
          <details>
          <summary>Terraform Outputs</summary>
          
          \`\`\`json
          ${{ steps.output.outputs.stdout || 'No outputs defined' }}
          \`\`\`
          </details>
          
          ðŸš€ **Infrastructure deployment completed successfully!**`;
          
          await github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: output
          });

    - name: Run Makefile targets (if any)
      run: |
        if [ -f "Makefile" ]; then
          echo "Makefile found, checking available targets..."
          make help || echo "No help target available"
          # Add specific make commands if you have them
          # make deploy || echo "No deploy target"
        else
          echo "No Makefile found"
        fi
      continue-on-error: true