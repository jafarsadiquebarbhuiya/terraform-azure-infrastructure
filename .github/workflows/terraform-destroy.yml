name: 'Terraform Selective Destroy'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to target'
        required: true
        default: 'DEV'
        type: choice
        options:
          - DEV
          - STAGE
          - PROD
      list_resources_only:
        description: 'List existing resources only (no destruction)'
        required: true
        default: true
        type: boolean
      resource_target:
        description: 'Resource to destroy (get this from the resource list output first)'
        required: false
        type: string
      confirm_destroy:
        description: 'Type "DESTROY-RESOURCE" to confirm destruction (only if list_resources_only is false)'
        required: false
        type: string

permissions:
  contents: read

jobs:
  list-resources:
    name: 'List Resources - ${{ github.event.inputs.environment }}'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if: github.event.inputs.list_resources_only == 'true'
    
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_CLI: false

    steps:
    - name: Set Environment Variables
      id: env_vars
      run: |
        case "${{ github.event.inputs.environment }}" in
          "DEV")
            echo "dir=dev" >> $GITHUB_OUTPUT
            echo "tfvars=devterraform.tfvars" >> $GITHUB_OUTPUT
            ;;
          "STAGE")
            echo "dir=staging" >> $GITHUB_OUTPUT
            echo "tfvars=stageterraform.tfvars" >> $GITHUB_OUTPUT
            ;;
          "PROD")
            echo "dir=prod" >> $GITHUB_OUTPUT
            echo "tfvars=prodterraform.tfvars" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init
      run: terraform init
      working-directory: environments/${{ steps.env_vars.outputs.dir }}

    - name: List All Resources in State
      id: list_state
      run: |
        echo "### 📋 Resources in Terraform State" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if terraform state list > /dev/null 2>&1; then
          echo "**Total Resources:** $(terraform state list | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Resource Address | Resource Type |" >> $GITHUB_STEP_SUMMARY
          echo "|------------------|---------------|" >> $GITHUB_STEP_SUMMARY
          terraform state list | while read resource; do
            resource_type=$(echo "$resource" | sed 's/\[.*\]//' | sed 's/.*\.//')
            echo "| \`$resource\` | $resource_type |" >> $GITHUB_STEP_SUMMARY
          done
          
          # Store resources for easy copy-paste
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Copy-Paste Ready Resource Addresses:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          terraform state list >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ No resources found in state or state file doesn't exist" >> $GITHUB_STEP_SUMMARY
        fi
      working-directory: environments/${{ steps.env_vars.outputs.dir }}

    - name: Get Resource Details
      run: |
        echo "### 🔍 Detailed Resource Information" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if terraform state list > /dev/null 2>&1; then
          terraform state list | while read resource; do
            echo "#### Resource: \`$resource\`" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            terraform state show "$resource" | head -20 >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          done
        fi
      working-directory: environments/${{ steps.env_vars.outputs.dir }}

    - name: Show Usage Instructions
      run: |
        echo "### 🎯 How to Destroy a Specific Resource" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. **Copy** one of the resource addresses from above" >> $GITHUB_STEP_SUMMARY
        echo "2. **Run this workflow again** with these settings:" >> $GITHUB_STEP_SUMMARY
        echo "   - **List resources only:** \`false\`" >> $GITHUB_STEP_SUMMARY
        echo "   - **Resource target:** Paste the resource address" >> $GITHUB_STEP_SUMMARY
        echo "   - **Confirm destroy:** \`DESTROY-RESOURCE\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📚 Example Resource Targets:" >> $GITHUB_STEP_SUMMARY
        echo "- \`module.dev_storageaccount\` - Destroy entire storage module" >> $GITHUB_STEP_SUMMARY
        echo "- \`azurerm_storage_account.storage_account[0]\` - Destroy specific storage account" >> $GITHUB_STEP_SUMMARY
        echo "- \`module.dev_resourcegroup\` - Destroy entire resource group module" >> $GITHUB_STEP_SUMMARY
        echo "- \`random_string.storage_suffix[0]\` - Destroy random string resource" >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: 'Destroy Resource - ${{ github.event.inputs.environment }}'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if: github.event.inputs.list_resources_only == 'false' && github.event.inputs.confirm_destroy == 'DESTROY-RESOURCE'
    
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_CLI: false

    steps:
    - name: Set Environment Variables
      id: env_vars
      run: |
        case "${{ github.event.inputs.environment }}" in
          "DEV")
            echo "dir=dev" >> $GITHUB_OUTPUT
            echo "tfvars=devterraform.tfvars" >> $GITHUB_OUTPUT
            ;;
          "STAGE")
            echo "dir=staging" >> $GITHUB_OUTPUT
            echo "tfvars=stageterraform.tfvars" >> $GITHUB_OUTPUT
            ;;
          "PROD")
            echo "dir=prod" >> $GITHUB_OUTPUT
            echo "tfvars=prodterraform.tfvars" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Validate Resource Target
      run: |
        if [ -z "${{ github.event.inputs.resource_target }}" ]; then
          echo "❌ Resource target cannot be empty when destroying"
          echo "💡 Run the workflow with 'List resources only: true' first to see available resources"
          exit 1
        fi
        echo "✅ Targeting resource: ${{ github.event.inputs.resource_target }}"
        echo "✅ Environment: ${{ github.event.inputs.environment }}"

    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init
      run: terraform init
      working-directory: environments/${{ steps.env_vars.outputs.dir }}

    - name: Verify Resource Exists
      run: |
        echo "### 🔍 Verifying Resource Exists" >> $GITHUB_STEP_SUMMARY
        if terraform state show "${{ github.event.inputs.resource_target }}" > /dev/null 2>&1; then
          echo "✅ Resource \`${{ github.event.inputs.resource_target }}\` found in state" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Resource \`${{ github.event.inputs.resource_target }}\` not found in state" >> $GITHUB_STEP_SUMMARY
          echo "Available resources:" >> $GITHUB_STEP_SUMMARY
          terraform state list >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
      working-directory: environments/${{ steps.env_vars.outputs.dir }}

    - name: Show Current Resources
      run: |
        echo "### 📋 Current Resources Before Destruction" >> $GITHUB_STEP_SUMMARY
        terraform state list >> $GITHUB_STEP_SUMMARY
      working-directory: environments/${{ steps.env_vars.outputs.dir }}

    - name: Terraform Destroy Plan
      run: |
        echo "Creating destroy plan for: ${{ github.event.inputs.resource_target }}"
        terraform plan -var-file="${{ steps.env_vars.outputs.tfvars }}" -destroy -target="${{ github.event.inputs.resource_target }}" -out=destroy-plan
      working-directory: environments/${{ steps.env_vars.outputs.dir }}

    - name: Show Destroy Plan
      run: |
        echo "### 🗑️ Resource to be DESTROYED:" >> $GITHUB_STEP_SUMMARY
        echo "**Target:** \`${{ github.event.inputs.resource_target }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        terraform show -no-color destroy-plan >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      working-directory: environments/${{ steps.env_vars.outputs.dir }}

    - name: Terraform Destroy
      run: |
        echo "Executing destruction of: ${{ github.event.inputs.resource_target }}"
        terraform apply -auto-approve destroy-plan
      working-directory: environments/${{ steps.env_vars.outputs.dir }}

    - name: Show Remaining Resources
      run: |
        echo "### 📋 Remaining Resources After Destruction" >> $GITHUB_STEP_SUMMARY
        terraform state list >> $GITHUB_STEP_SUMMARY || echo "No resources remaining" >> $GITHUB_STEP_SUMMARY
      working-directory: environments/${{ steps.env_vars.outputs.dir }}

    - name: Log Destruction Success
      run: |
        echo "### 💥 Selective Destruction Completed"
        echo "**Resource Destroyed:** \`${{ github.event.inputs.resource_target }}\`"
        echo "**Environment:** ${{ github.event.inputs.environment }}"
        echo "**Destroyed by:** ${{ github.actor }}"
        echo "**Timestamp:** $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        echo "✅ Targeted resource destruction completed successfully!"