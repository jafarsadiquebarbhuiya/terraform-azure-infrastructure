name: 'Terraform Plan'

on:
  pull_request:
    branches:
      - master  # Your main branch
    paths:
      - 'environments/**'
      - 'modules/**'
      - '.github/workflows/**'

permissions:
  contents: read
  issues: write
  pull-requests: write
  pull-requests: write

jobs:
  terraform-plan:
    name: 'Terraform Plan - DEV'
    runs-on: ubuntu-latest
    environment: DEV
    
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_CLI: false
    
    defaults:
      run:
        shell: bash
        working-directory: environments/dev  # Your working directory

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: .

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -var-file="devterraform.tfvars" -no-color -out=tfplan
        terraform show -no-color tfplan > plan_output.txt
      continue-on-error: true

    - name: Update Pull Request with Plan
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = 'environments/dev/plan_output.txt';
          
          if (!fs.existsSync(path)) {
            console.log('Plan output file not found');
            return;
          }
          
          const plan = fs.readFileSync(path, 'utf8');
          const maxGitHubBodyCharacters = 65536;
          
          function chunkSubstr(str, size) {
            const numChunks = Math.ceil(str.length / size)
            const chunks = new Array(numChunks)
            for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
              chunks[i] = str.substr(o, size)
            }
            return chunks
          }
          
          const planChunks = chunkSubstr(plan, maxGitHubBodyCharacters);
          
          for (let i = 0; i < planChunks.length; i++) {
            const output = `### ðŸ“‹ Terraform Plan Result for DEV Environment ${planChunks.length > 1 ? `(Part ${i + 1}/${planChunks.length})` : ''}
            
            **Working Directory:** \`environments/dev\`
            **Variables File:** \`devterraform.tfvars\`
            **Branch:** \`${{ github.head_ref }}\`
            
            <details>
            <summary>Click to expand Terraform Plan</summary>
            
            \`\`\`terraform
            ${planChunks[i]}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
          }

    - name: Check Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1